##
# This is the CI/CD workflow for the firebase functions.
# Pre-requisites:
# These tokes are stored in the secrets.
# 1. FIREBASE_TOKEN : ci token obtained via firebase login:ci
# 2. The project id similar to the .firebaserc file 
#    2.1 FIREBASE_DEV_PROJECT_ID : project id for deploying to the DEV environment
#    2.2 FIREBASE_UAT_PROJECT_ID : project id for deploying to the UAT environment
#    2.3 FIREBASE_PROD_PROJECT_ID : project id for deploying to the PROD environment
##
name: ci/cd
on: 
  pull_request:
    branches: [develop]
  push:
    branches: [develop, test, master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env: 
  my_branch: ${{ toJSON(github) }}
jobs:
  cicd:
    runs-on: ubuntu-latest
    steps:
      - run: echo "BRANCH ${{ env.my_branch }}"
      
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v2

      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."

      - name: 'decrypt pem file'
        run: | 
          cd functions
          gpg --quiet --batch --yes --decrypt --passphrase=${{ secrets.PASSPHRASE }} --output test.pem test.pem.gpg
          ls


      - name: Check out my other private repo
        uses: actions/checkout@v2
        with:
          repository: kinela-connect/server-config-kinela-connect
          token: ${{ secrets.CICD_PAT }}
          path: prisma123
          ref: develop
      
      - name: Uses node 16.x
        uses: actions/setup-node@v1
        with: 
          node-version: '16.x'
          
      - name: Cache npm node_modules
        uses: actions/cache@v1
        with: 
          path: ~/.npm
          key: ${{ runner.os }}-fb-cloud-fn-${{ hashfiles('**/functions/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      
      - name: List directory
        run: |
          pwd
          ls
          cd prisma123
          ls  

      # - name: Run npm ci
      #   run: |
      #     cd functions
      #     npm ci

      # - name: Run unit tests
      #   run: |
      #     cd functions
      #     npm test -- --coverage

      # - name: Upload code coverage artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: code-coverage
      #     path: functions/coverage

      # - name: Run semantic release
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      #   env: 
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     cd functions
      #     npx semantic-release
        

      # - name: Deploy to DEV firebase   
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      #   uses: w9jds/firebase-action@v2.0.0
      #   with:
      #     args: deploy --only functions
      #   env: 
      #       FIREBASE_TOKEN: ${{secrets.FIREBASE_TOKEN}}
      #       PROJECT_ID: ${{secrets.FIREBASE_DEV_PROJECT_ID}}    

      # - name: Deploy to UAT environment
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/test'
      #   uses: w9jds/firebase-action@v2.0.0
      #   with:
      #     args: deploy --only functions
      #   env: 
      #       FIREBASE_TOKEN: ${{secrets.FIREBASE_TOKEN}}
      #       PROJECT_ID: ${{secrets.FIREBASE_UAT_PROJECT_ID}}

      # - name: Deploy to PROD environment
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      #   uses: w9jds/firebase-action@v2.0.0
      #   with:
      #     args: deploy --only functions
      #   env: 
      #       FIREBASE_TOKEN: ${{secrets.FIREBASE_TOKEN}}
      #       PROJECT_ID: ${{secrets.FIREBASE_PROD_PROJECT_ID}}      

      # - name: Upload build folder for Production deployment
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: build
      #     path: functions/lib/src

      - run: echo "Job status is ${{ job.status }}."


    
